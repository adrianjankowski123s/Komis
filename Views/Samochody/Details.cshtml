@model Komis.Samochody

@{
    ViewBag.Title = "Szczegóły";
}
<link rel="stylesheet" href="~/Content/Site.css">
<h2>@Html.DisplayFor(model => model.Tytul)</h2>

<div>
    <h4> @Html.DisplayFor(model => model.Podtytul)</h4>
    <hr />



    <dl class="dl-horizontal">



        @if (Model.Rok.ToString() != "" && Model.Rok != null)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Rok)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Rok)
            </dd>
        }
        @if (Model.Przebieg.ToString() != "" && Model.Przebieg != null)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Przebieg)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Przebieg)
            </dd>
        }
        @if (Model.Pojemnosc.ToString() != "" && Model.Pojemnosc != null)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Pojemnosc)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Pojemnosc)
            </dd>
        }
        @if (Model.Rodzaj_paliwa != "" && Model.Rodzaj_paliwa != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Rodzaj_paliwa)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Rodzaj_paliwa)
            </dd>
        }
        @if (Model.Kategoria != "" && Model.Kategoria != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Kategoria)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Kategoria)
            </dd>
        }
        @if (Model.Marka != "" && Model.Marka != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Marka)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Marka)
            </dd>
        }
        @if (Model.Model != "" && Model.Model != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Model)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Model)
            </dd>
        }
        @if (Model.Wersja != "" && Model.Wersja != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Wersja)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Wersja)
            </dd>
        }
        @if (Model.Generacja != "" && Model.Generacja != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Generacja)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Generacja)
            </dd>
        }
        @if (Model.Moc != "" && Model.Moc != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Moc)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Moc)
            </dd>
        }
        @if (Model.Skrzynia_biegow != "" && Model.Skrzynia_biegow != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Skrzynia_biegow)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Skrzynia_biegow)
            </dd>
        }
        @if (Model.Naped != "" && Model.Naped != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Naped)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Naped)
            </dd>
        }
        @if (Model.Vin != "" && Model.Vin != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Vin)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Vin)
            </dd>
        }
        @if (Model.Emisja_co2 != "" && Model.Emisja_co2 != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Emisja_co2)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Emisja_co2)
            </dd>
        }
        @if (Model.Typ != "" && Model.Typ != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Typ)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Typ)
            </dd>
        }
        @if (Model.Liczba_drzwi.ToString() != "" && Model.Liczba_drzwi != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Liczba_drzwi)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Liczba_drzwi)
            </dd>
        }
        @if (Model.Liczba_miejsc.ToString() != "" && Model.Liczba_miejsc != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Liczba_miejsc)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Liczba_miejsc)
            </dd>
        }
        @if (Model.Kolor != "" && Model.Kolor != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Kolor)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Kolor)
            </dd>
        }
        @if (Model.Pierwsza_rejestracja.ToString() != "" && Model.Pierwsza_rejestracja != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Pierwsza_rejestracja)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Pierwsza_rejestracja)
            </dd>
        }
        @if (Model.Numer_rejestracyjny != "" && Model.Numer_rejestracyjny != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Numer_rejestracyjny)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Numer_rejestracyjny)
            </dd>
        }
        @if (Model.Zarejestrowany_w_polsce != "" && Model.Zarejestrowany_w_polsce != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Zarejestrowany_w_polsce)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Zarejestrowany_w_polsce)
            </dd>
        }
        @if (Model.Stan != "" && Model.Stan != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Stan)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Stan)
            </dd>
        }
        @if (Model.Kraj_pochodzenia != "" && Model.Kraj_pochodzenia != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Kraj_pochodzenia)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Kraj_pochodzenia)
            </dd>
        }
        @if (Model.Opis != "" && Model.Opis != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Opis)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Opis)
            </dd>
        }
        @if (Model.Wyposazenie != "" && Model.Wyposazenie != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Wyposazenie)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Wyposazenie)
            </dd>
        }
        @if (Model.Kwota.ToString() != "" && Model.Kwota != null)
        {

            <dt>
                @Html.DisplayNameFor(model => model.Kwota)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Kwota)
            </dd>
        }


    </dl>



    <h2>Zdjęcia:</h2>

    <div class="my-gallery" itemscope itemtype="http://schema.org/ImageGallery">
        @if (Model.Zdjecia.Count != 0)
        {
            foreach (var zdjecie in Model.Zdjecia)
            {
                <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
                    <a href="@Url.Action("show", "Samochody", new { id = zdjecie.Id_zdjecia }) " itemprop="contentUrl" data-size="1024x1024">
                        <img src="@Url.Action("show", "Samochody", new { id = zdjecie.Id_zdjecia }) " itemprop="thumbnail" />
                    </a>
                </figure>
            }
        }
    </div>


    <!-- Root element of PhotoSwipe. Must have class pswp. -->
    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

        <!-- Background of PhotoSwipe.
             It's a separate element, as animating opacity is faster than rgba(). -->
        <div class="pswp__bg"></div>

        <!-- Slides wrapper with overflow:hidden. -->
        <div class="pswp__scroll-wrap">

            <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
            <!-- don't modify these 3 pswp__item elements, data is added later on. -->
            <div class="pswp__container">
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
            </div>

            <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
            <div class="pswp__ui pswp__ui--hidden">

                <div class="pswp__top-bar">

                    <!--  Controls are self-explanatory. Order can be changed. -->

                    <div class="pswp__counter"></div>

                    <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                    <button class="pswp__button pswp__button--share" title="Share"></button>

                    <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                    <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                    <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                    <!-- element will get class pswp__preloader--active when preloader is running -->
                    <div class="pswp__preloader">
                        <div class="pswp__preloader__icn">
                            <div class="pswp__preloader__cut">
                                <div class="pswp__preloader__donut"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                    <div class="pswp__share-tooltip"></div>
                </div>

                <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
                </button>

                <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
                </button>

                <div class="pswp__caption">
                    <div class="pswp__caption__center"></div>
                </div>

            </div>

        </div>

    </div>



    @Html.AntiForgeryToken()
    <input type="button" value="Zapytaj o pojazd" id="emailButton" />
    @Html.Hidden("RedirectTo", Url.Action("Contact", "Home"))
</div>
<br>
<p>
    @if (Request.IsAuthenticated && User.IsInRole("Admin"))
    {
        @Html.ActionLink("Edytuj | ", "Edit", new { id = Model.Id_samochodu })
    }

    @Html.ActionLink("Wróć do ogłoszeń", "Index")
</p>

@section Scripts {

    <script type="text/javascript">
    function gettoken() {
        var token = '@Html.AntiForgeryToken()';
        token = $(token).val();
        return token;
   }
    </script>

    <script>
    var topic = '@Html.Raw(Model.Id_samochodu)' + " " + '@Html.Raw(Model.Tytul)';

    var c = document.getElementById("emailButton");
    c.addEventListener("click", function (event) {
        sessionStorage.setItem("Topic", topic);
        var url = $("#RedirectTo").val();
        location.href = url;

    }, false);

    </script>


    <link rel="stylesheet" href="~/Scripts/photoswipe.css" />
    <link rel="stylesheet" href="~/Scripts/default-skin/default-skin.css" />
    <script src="~/Scripts/photoswipe.min.js" ></script>
    <script src="~/Scripts/photoswipe-ui-default.min.js"></script>

    <script>

        var initPhotoSwipeFromDOM = function (gallerySelector) {

            // parse slide data (url, title, size ...) from DOM elements 
            // (children of gallerySelector)
            var parseThumbnailElements = function (el) {
                var thumbElements = el.childNodes,
                    numNodes = thumbElements.length,
                    items = [],
                    figureEl,
                    linkEl,
                    size,
                    item;

                for (var i = 0; i < numNodes; i++) {

                    figureEl = thumbElements[i]; // <figure> element

                    // include only element nodes 
                    if (figureEl.nodeType !== 1) {
                        continue;
                    }

                    linkEl = figureEl.children[0]; // <a> element

                    size = linkEl.getAttribute('data-size').split('x');

                    // create slide object
                    item = {
                        src: linkEl.getAttribute('href'),
                        w: parseInt(size[0], 10),
                        h: parseInt(size[1], 10)
                    };



                    if (figureEl.children.length > 1) {
                        // <figcaption> content
                        item.title = figureEl.children[1].innerHTML;
                    }

                    if (linkEl.children.length > 0) {
                        // <img> thumbnail element, retrieving thumbnail url
                        item.msrc = linkEl.children[0].getAttribute('src');
                    }

                    item.el = figureEl; // save link to element for getThumbBoundsFn
                    items.push(item);
                }

                return items;
            };

            // find nearest parent element
            var closest = function closest(el, fn) {
                return el && (fn(el) ? el : closest(el.parentNode, fn));
            };

            // triggers when user clicks on thumbnail
            var onThumbnailsClick = function (e) {
                e = e || window.event;
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var eTarget = e.target || e.srcElement;

                // find root element of slide
                var clickedListItem = closest(eTarget, function (el) {
                    return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
                });

                if (!clickedListItem) {
                    return;
                }

                // find index of clicked item by looping through all child nodes
                // alternatively, you may define index via data- attribute
                var clickedGallery = clickedListItem.parentNode,
                    childNodes = clickedListItem.parentNode.childNodes,
                    numChildNodes = childNodes.length,
                    nodeIndex = 0,
                    index;

                for (var i = 0; i < numChildNodes; i++) {
                    if (childNodes[i].nodeType !== 1) {
                        continue;
                    }

                    if (childNodes[i] === clickedListItem) {
                        index = nodeIndex;
                        break;
                    }
                    nodeIndex++;
                }



                if (index >= 0) {
                    // open PhotoSwipe if valid index found
                    openPhotoSwipe(index, clickedGallery);
                }
                return false;
            };

            // parse picture index and gallery index from URL (#&pid=1&gid=2)
            var photoswipeParseHash = function () {
                var hash = window.location.hash.substring(1),
                    params = {};

                if (hash.length < 5) {
                    return params;
                }

                var vars = hash.split('&');
                for (var i = 0; i < vars.length; i++) {
                    if (!vars[i]) {
                        continue;
                    }
                    var pair = vars[i].split('=');
                    if (pair.length < 2) {
                        continue;
                    }
                    params[pair[0]] = pair[1];
                }

                if (params.gid) {
                    params.gid = parseInt(params.gid, 10);
                }

                return params;
            };

            var openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {
                var pswpElement = document.querySelectorAll('.pswp')[0],
                    gallery,
                    options,
                    items;

                items = parseThumbnailElements(galleryElement);

                // define options (if needed)
                options = {
                    // Buttons/elements
                    closeEl: true,
                    captionEl: true,
                    fullscreenEl: true,
                    zoomEl: true,
                    shareEl: false,
                    counterEl: true,
                    arrowEl: true,
                    preloaderEl: true,

                    // define gallery index (for URL)
                    galleryUID: galleryElement.getAttribute('data-pswp-uid'),

                    getThumbBoundsFn: function (index) {
                        // See Options -> getThumbBoundsFn section of documentation for more info
                        var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                            pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                            rect = thumbnail.getBoundingClientRect();

                        return { x: rect.left, y: rect.top + pageYScroll, w: rect.width };
                    }

                };

                // PhotoSwipe opened from URL
                if (fromURL) {
                    if (options.galleryPIDs) {
                        // parse real index when custom PIDs are used 
                        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
                        for (var j = 0; j < items.length; j++) {
                            if (items[j].pid == index) {
                                options.index = j;
                                break;
                            }
                        }
                    } else {
                        // in URL indexes start from 1
                        options.index = parseInt(index, 10) - 1;
                    }
                } else {
                    options.index = parseInt(index, 10);
                }

                // exit if index not found
                if (isNaN(options.index)) {
                    return;
                }

                if (disableAnimation) {
                    options.showAnimationDuration = 0;
                }

                // Pass data to PhotoSwipe and initialize it
                gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
                gallery.init();
            };

            // loop through all gallery elements and bind events
            var galleryElements = document.querySelectorAll(gallerySelector);

            for (var i = 0, l = galleryElements.length; i < l; i++) {
                galleryElements[i].setAttribute('data-pswp-uid', i + 1);
                galleryElements[i].onclick = onThumbnailsClick;
            }

            // Parse URL and open gallery if it contains #&pid=3&gid=1
            var hashData = photoswipeParseHash();
            if (hashData.pid && hashData.gid) {
                openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
            }
        };

        // execute above function
        initPhotoSwipeFromDOM('.my-gallery');
    </script>


}
